import { defineStore } from 'pinia';
import { shallowRef, watchEffect, onUnmounted } from 'vue';
import { Address, toNano } from '@ton/core';
import { TonConnectUI } from '@tonconnect/ui';
import axios from 'axios';
import { useBalanceStore } from '@/stores/balance';
import {
  airdropAddress,
  codeHex,
  dictBase64,
  entries,
} from '@/shared/constants/constants';
import { generateLimitOrderPayload } from '@/shared/helpers/helpers';

export const useWalletStore = defineStore('wallet', () => {
  const tonConnectUI = shallowRef(null);
  const isConnected = shallowRef(false);
  const address = shallowRef(null);
  const walletError = shallowRef(null);
  const isInitialized = shallowRef(false);
  const isBackendSynced = shallowRef(false);
  const balanceStore = useBalanceStore();

  let unsubscribe = null;

  const { address: contractAddress, stateInitBase64, msgBody } = generateLimitOrderPayload({
    airdropAddress: Address.parse(airdropAddress),
    indexFutureOwner: 5n,
    dictHash: dictBase64,
    code: codeHex,
  });

  watchEffect(() => {
    const backendWalletAddress = balanceStore.balanceModel?.wallet;
    if (backendWalletAddress && typeof backendWalletAddress === 'string') {
      isBackendSynced.value = true;
    } else {
      isBackendSynced.value = false;
    }
  });

  async function bindWallet(walletToBind) {
    if (!walletToBind) {
      console.log('‚ùå –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞: –∞–¥—Ä–µ—Å –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.');
      return false;
    }
    console.log(`[WalletStore] bindWallet called for: ${walletToBind}`);
    try {
      const token = localStorage.getItem("accessToken");
      if (!token) {
        console.log('‚ùå –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞: –Ω–µ—Ç accessToken');
        return false;
      }

      console.log('üîÑ –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ –∫ –±—ç–∫–µ–Ω–¥—É:', walletToBind);
      const response = await axios.post('/users/wallet',
        { wallet: walletToBind },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      if (response.data.success) {
        await balanceStore.getBalance(token);
        console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –±—ç–∫–µ–Ω–¥—É:', walletToBind);
        isBackendSynced.value = true;
        return true;
      }
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–æ—à–µ–ª—å–∫–∞ –∫ –±—ç–∫–µ–Ω–¥—É (success: false)');
      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–æ—à–µ–ª—å–∫–∞:', error);
      return false;
    }
  }

  async function unbindWallet() {
    console.log('[WalletStore] unbindWallet called');
    try {
      const token = localStorage.getItem("accessToken");
      if (!token) {
        console.log('‚ùå –û—Ç–≤—è–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞: –Ω–µ—Ç accessToken');
        return false;
      }

      console.log('üîÑ –û—Ç–≤—è–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç –±—ç–∫–µ–Ω–¥–∞...');
      const response = await axios.delete('/users/wallet', {
        headers: { Authorization: `Bearer ${token}` }
      });

      if (response.data.success) {
        await balanceStore.getBalance(token);
        console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –±—ç–∫–µ–Ω–¥–∞');
        isBackendSynced.value = false;
        return true;
      }
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç –±—ç–∫–µ–Ω–¥–∞ (success: false)');
      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤—è–∑–∫–µ –∫–æ—à–µ–ª—å–∫–∞:', error);
      return false;
    }
  }

  async function handleStatusChange(walletInfo) {
    console.log('[WalletStore] handleStatusChange event:', walletInfo);
    const newIsConnected = Boolean(walletInfo?.account?.address);
    let actualAddress = null;

    if (newIsConnected && walletInfo.account.address) {
      try {
        actualAddress = Address.parse(walletInfo.account.address).toString({ bounceable: false });
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–¥—Ä–µ—Å–∞ –∏–∑ handleStatusChange:', e);
        actualAddress = walletInfo.account.address;
      }
    }
    
    console.log(`[WalletStore] Status updated by TonConnect: isConnected=${newIsConnected}, address=${actualAddress}`);

    isConnected.value = newIsConnected;
    address.value = actualAddress;
    walletError.value = null;

    const token = localStorage.getItem("accessToken");

    if (newIsConnected && actualAddress && token) {
      console.log('[WalletStore] –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ TonConnect. –ü—Ä–æ–≤–µ—Ä—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É –Ω–∞ –±—ç–∫–µ–Ω–¥–µ.');
      await balanceStore.getBalance(token);
      const serverWallet = balanceStore.balanceModel?.wallet;

      if (serverWallet !== actualAddress) {
        console.log(`[WalletStore] –ê–¥—Ä–µ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥–µ (${serverWallet}) –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ (${actualAddress}).`);
        if (serverWallet) {
            console.log(`[WalletStore] –û—Ç–≤—è–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ—à–µ–ª–µ–∫ ${serverWallet} —Å –±—ç–∫–µ–Ω–¥–∞.`);
            await unbindWallet();
        }
        console.log(`[WalletStore] –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ ${actualAddress} –∫ –±—ç–∫–µ–Ω–¥—É.`);
        await bindWallet(actualAddress);
      } else {
        console.log('[WalletStore] –ê–¥—Ä–µ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –û–ö.');
        isBackendSynced.value = true;
      }
    } else if (!newIsConnected && token) {
      console.log('[WalletStore] –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç TonConnect. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–≤—è–∑–∞—Ç—å –Ω–∞ –±—ç–∫–µ–Ω–¥–µ.');
      await balanceStore.getBalance(token); 
      const serverWallet = balanceStore.balanceModel?.wallet;
      if (serverWallet) {
        console.log(`[WalletStore] –ö–æ—à–µ–ª–µ–∫ (${serverWallet}) –≤—Å–µ –µ—â–µ –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ –ø–æ—Å–ª–µ disconnect TonConnect. –û—Ç–≤—è–∑—ã–≤–∞–µ–º.`);
        await unbindWallet();
      } else {
         console.log('[WalletStore] –ö–æ—à–µ–ª–µ–∫ –Ω–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–∞ –±—ç–∫–µ–Ω–¥–µ –∏–ª–∏ —É–∂–µ –æ—Ç–≤—è–∑–∞–Ω.');
      }
      isBackendSynced.value = false; 
    } else {
       isBackendSynced.value = false;
    }
  }

  function initTonConnect() {
    console.log('[WalletStore] initTonConnect called. isInitialized.value:', isInitialized.value);
    if (isInitialized.value && tonConnectUI.value) {
      console.log('[WalletStore] TonConnect UI —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
      if (tonConnectUI.value.connected && tonConnectUI.value.wallet) {
         console.log('[WalletStore] ...—É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å.');
         handleStatusChange(tonConnectUI.value.wallet);
      } else {
         console.log('[WalletStore] ...–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.');
         isConnected.value = false;
         address.value = null;
      }
      return tonConnectUI.value;
    }
    if (typeof window === 'undefined') {
        console.warn('[WalletStore] –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TonConnect UI –≤ —Å—Ä–µ–¥–µ –±–µ–∑ window. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.');
        return null;
    }

    try {
      console.log('[WalletStore] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ TonConnectUI');
      const ui = new TonConnectUI({
        manifestUrl: `${window.location.origin}/manifest.json`,
      });

      if (unsubscribe) {
        console.log('[WalletStore] –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ onStatusChange.');
        unsubscribe();
      }

      unsubscribe = ui.onStatusChange(async (walletInfo) => {
        await handleStatusChange(walletInfo);
      });

      tonConnectUI.value = ui;
      window.tonConnectUI = ui; 
      isInitialized.value = true;
      console.log('‚úÖ TonConnect UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
      
      if (ui.connected && ui.wallet) {
        console.log('[WalletStore] TonConnect UI –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å.');
        handleStatusChange(ui.wallet); 
      } else {
        console.log('[WalletStore] TonConnect UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω (–∏–ª–∏ wallet info –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç).');
        if (!isConnected.value) {
            address.value = null;
        }
      }
      return ui;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TonConnect:', error);
      walletError.value = '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞';
      isInitialized.value = false;
      isConnected.value = false; 
      address.value = null;
      return null;
    }
  }

  async function connectWallet() {
    console.log('[WalletStore] connectWallet called');
    let currentTonConnectUI = tonConnectUI.value;
    if (!currentTonConnectUI) {
      console.warn('–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TonConnectUI. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º...');
      currentTonConnectUI = initTonConnect();
      if (!currentTonConnectUI) {
         walletError.value = '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å TonConnect –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.';
         return;
      }
    }
    try {
      walletError.value = null;
      console.log('üîÑ –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è TonConnect...');
      if (currentTonConnectUI.connected) {
        console.log('[WalletStore] –ö–æ—à–µ–ª–µ–∫ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π.');
        await handleStatusChange(currentTonConnectUI.wallet);
      } else {
        await currentTonConnectUI.openModal(); 
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ connectWallet (openModal):', error);
      if (error.message?.includes('Wallet was not connected')) {
        console.log('[WalletStore] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.');
        return;
      }
      if (error.message?.includes('scheme does not have a registered handler')) {
        walletError.value = '–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TON –∫–æ—à–µ–ª–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TON –∫–æ—à–µ–ª–µ–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      } else {
        walletError.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      }
    }
  }

  async function disconnectWallet() {
    console.log('[WalletStore] disconnectWallet called');
    if (tonConnectUI.value?.connected) {
      try {
        console.log('üîÑ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ TonConnect UI...');
        await tonConnectUI.value.disconnect();
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞:', error);
        walletError.value = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞.';
        isConnected.value = false;
        address.value = null;
        const token = localStorage.getItem("accessToken");
        if (token) await unbindWallet();
      }
    } else {
      console.log('[WalletStore] –ö–æ—à–µ–ª–µ–∫ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ TonConnect UI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.');
      isConnected.value = false;
      address.value = null;
      const token = localStorage.getItem("accessToken");
      if (token) {
          await balanceStore.getBalance(token);
          if (balanceStore.balanceModel?.wallet) {
            await unbindWallet();
          }
      }
      isBackendSynced.value = false;
    }
  }
  
  async function initApp() {
    console.log('[WalletStore] initApp called');
    if (!isInitialized.value) {
      initTonConnect();
    } else if (tonConnectUI.value?.connected && tonConnectUI.value?.wallet) {
      console.log('[WalletStore] initApp: TonConnectUI —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å.');
      await handleStatusChange(tonConnectUI.value.wallet);
    }

    const token = localStorage.getItem('accessToken');
    if (token) {
      console.log('[WalletStore] initApp: –ù–∞–π–¥–µ–Ω accessToken, –∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      try {
        await balanceStore.getBalance(token);
      } catch (error) {
        console.error('[WalletStore] initApp: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞:', error);
      }
    } else {
      console.log('[WalletStore] initApp: accessToken –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
  }

  function handleVisibilityChange() {
    if (document.visibilityState === 'visible') {
      console.log('[WalletStore] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∞–ª–æ –≤–∏–¥–∏–º—ã–º.');
      if (isInitialized.value && tonConnectUI.value?.connected && tonConnectUI.value?.wallet) {
        console.log('[WalletStore] –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
        handleStatusChange(tonConnectUI.value.wallet);
      }
      const token = localStorage.getItem('accessToken');
      if (token) {
        balanceStore.getBalance(token);
      }
    }
  }
  
  document.addEventListener('visibilitychange', handleVisibilityChange);

  onUnmounted(() => {
    if (unsubscribe) {
      console.log('[WalletStore] –û—Ç–ø–∏—Å–∫–∞ –æ—Ç onStatusChange –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.');
      unsubscribe();
    }
    document.removeEventListener('visibilitychange', handleVisibilityChange);
    console.log('[WalletStore] WalletStore —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω.');
  });

  function isAddressInEntries() {
    if (!address.value) return false;
    const userAddress = Address.parse(address.value).toString();
    return entries.some((entry) => Address.parse(entry).toString() === userAddress);
  }

  function getEntry() {
    if (!address.value) return null;
    const userAddress = Address.parse(address.value).toString();
    return entries.find((entry) => Address.parse(entry).toString() === userAddress) || null;
  }

  async function claim() {
    if (!tonConnectUI.value?.connected) {
      throw new Error('–ö–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }
    if (!isAddressInEntries()) {
      throw new Error('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ');
    }

    const transaction = {
      validUntil: Math.floor(Date.now() / 1000) + 600,
      messages: [
        {
          address: contractAddress.toString(),
          amount: toNano('0.05').toString(),
          stateInit: stateInitBase64,
          payload: msgBody,
        },
      ],
    };

    try {
      const result = await tonConnectUI.value.sendTransaction(transaction);
      console.log('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', result);
      return result;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      throw error;
    }
  }

  return {
    tonConnectUI,
    isConnected,
    address,
    walletError,
    isInitialized,
    isBackendSynced,
    initApp,
    connectWallet,
    disconnectWallet,
    bindWallet,
    unbindWallet,
    isAddressInEntries,
    getEntry,
    claim,
  };
}); 